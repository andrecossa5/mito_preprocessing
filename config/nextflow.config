// mito-preprocessing

// Manifest
manifest {
  name = 'mito-preprocessing'
  author = 'Andrea Cossa'
  homePage = 'https://github.com/andrecossa5/mito_preprocessing.git'
  description = 'Preprocessing pipeline for lentiviral- and/or MT-variants-based lineage tracing.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.1'
}

// Profiles
profiles {

  local {
    docker.enabled = true
    docker.runOptions = '--volume /Users/:/Users/'
  }
  conda_local {
    conda.enabled = true
    conda.envPath = '/Users/IEO5505/mambaforge/envs/MI_TO'
  }
  hpc {
    // workDir = '/.../'
    executor.name = 'pbspro'
    process.queue = 'workq'
    singularity.enabled = true
    singularity.runOptions = '--bind /hpcnfs,/hcpscratch'
    executor.queueSize = 20
    executor.submitRateLimit = '10/1min'
    executor.exitReadTimeout = '5 min'
  }
  hpc_nocg {
    // workDir = '/.../'
    executor.name = 'pbspro'
    process.queue = 'nocg_workq'
    singularity.enabled = true
    singularity.runOptions = '--bind /hpcnfs'
  }
  // conda_garr {
  //   singularity.enabled = true
  //   singularity.runOptions = '--bind /hpcnfs,/hcpscratch'
  // }
  hpc_garr {
    singularity.enabled = true
    singularity.runOptions = '--bind /hpcnfs,/hcpscratch'
  }

}


//


// Processes
process {
    
  errorStrategy = 'retry'
  maxRetries = 3

  
  //


  // bulk_gbc
  withName: SEARCH_PATTERNS {
    cpus = 1
    memory = '1G'
    container = 'acox1/mi_to:1.3'
  }
  withName: EXTRACT_GBC {
    cpus = 1
    memory = '1G'
    container = 'acox1/mi_to:1.3'
  }
  withName: CORRECT_AND_COUNT {
    cpus = 1
    memory = { 5.GB * task.attempt }
    container = 'acox1/mi_to:1.3'
  } 
  withName: INFER_PREVALENCES {
    cpus = 1
    memory = '1G'
    container = 'acox1/mi_to:1.3'
  }
  withName: generate_run_summary_bulk {
    cpus = 1
    memory = '2G'
    container = 'acox1/mi_to:1.3'
  }
  withName: publish_bulk {
    cpus = 1
    memory = '2G'
    container = 'acox1/mi_to:1.3'
  }
  withName: collapse_output {
    cpus = 1
    memory = '2G'
    container = 'acox1/mi_to:1.3'
  }


  //


  // sc_gbc
  withName: MERGE_FQ {
    cpus = 4
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.3'
  }
  withName: GET_GBC_ELEMENTS {
    cpus = 1
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.3'
  }
  withName: SOLO {
    cpus = 4
    memory = { 10.GB * task.attempt }
    container = 'acox1/nf-perturbseq:1.0'
  }
  withName: GET_LENTIBAM {
    cpus = 1
    memory = { 10.GB * task.attempt }
    container = 'acox1/mi_to:1.3'
  }
  withName: CELL_ASSIGNMENT {
    cpus = 4
    memory = 10.GB
    container = 'acox1/mi_to:1.3'
  }
  withName: generate_run_summary_sc {
    cpus = 1
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.3'
  }
  withName: publish_sc {
    cpus = 1
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.3'
  }    


  //


  // maester
  withName: ASSEMBLE_FQ {
    cpus = 2
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.0'
  } 
  withName: FILTER_I {
    cpus = 4
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.0'
  }
  withName: FILTER_II {
    cpus = 4
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.0'
  }
  withName: FIX_TAGS {
    cpus = 1
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.0'
  } 
  withName: MERGE_BAM {
    cpus = 5
    memory = { 1.GB * task.attempt }
    container = 'acox1/mi_to:1.0'
  }
  withName: INDEX {
    cpus = 2
    memory = { 1.GB  * task.attempt }
  }
  withName: STAR {
    cpus = 5
    memory = { 10.GB * task.attempt }
    container = 'acox1/nf-perturbseq:1.0'
  } 
  withName: MAEGATK {
    cpus = 6
    memory = { 12.GB  * task.attempt }
    container = 'acox1/mi_to:1.0'
  } 
  withName: TO_H5AD {
    cpus = 1
    memory = { 5.GB * task.attempt }
    container = 'acox1/mi_to:1.0'
  } 
  withName: publish_maester {
    cpus = 1
    memory = { 1.GB * task.attempt }
    container = 'acox1/nf-perturbseq:1.0'
  } 

}

// Tracing
trace {
    enabled = true
    file = "trace.txt"
    overwrite = true
}

// Tracing
tower {
    enabled = true
}